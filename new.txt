from dotenv import load_dotenv

# Load all the environment variables from .env
load_dotenv()

import streamlit as st  # Create web based application for POC purpose
import os  # Working with environment variables and assign values 
from PIL import Image
import google.generativeai as genai


genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))



def get_gemini_response(input,image,prompt):
    # Function to load Gemini Pro Vision
    model = genai.GenerativeModel("gemini-pro-vision")

    # input = how to model behave eg. invoice expert
    # image = image from where we want answer
    # prompt = the message we want to predicte
    response = model.generate_content([input,image[0],prompt])
    return response.text

        
    
# Convert uploaded image into binary data
def input_image_details(uploaded_file): 
    if uploaded_file is not None:
        bytes_data = uploaded_file.getvalue()
        
        image_parts = [
            {
                'mime_type' : uploaded_file.type,
                'data':bytes_data
            }
        ]
        return image_parts
    else:
        raise FileNotFoundError("No file uploaded")

# Create streamlit app

st.set_page_config(page_title="Image Extractor")
st.header("Gemini Application of Image Extractor")

query = st.text_input("Input Prompt: ", key="input")
uploaded_file = st.file_uploader("Choose an image of the invoice",type=['jpg','jpeg','png'])

image = ""

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="uploaded image", use_column_width=True)

submit = st.button("Tell me about invoice")

input_prompt = """
               You are an expert in understanding invoices.
               You will receive input images as invoices &
               you will have to answer questions based on the input image
               """
# input_prompt = """
# You are an expert in understanding research papers. We will upload an image as research paper 
# and you will have to answer any question based on the uploaded research paper
# """

# If submit button clicked

if submit: 
    image_data = input_image_details(uploaded_file)
    response = get_gemini_response(input_prompt,image_data,query) 
    st.subheader("The Response is ")
    st.response(response)


